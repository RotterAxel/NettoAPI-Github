// <auto-generated />
using System;
using Infrastructure.Persistence.DbContexts.Insurance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Persistence.Migrations.Insurance
{
    [DbContext(typeof(InsuranceDbContext))]
    [Migration("20201221202632_AddedLaufzeitUndVergütungZuGesellschafft")]
    partial class AddedLaufzeitUndVergütungZuGesellschafft
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Insurance.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Hausnummer")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LandId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Plz")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Straße")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("LandId");

                    b.ToTable("Adressen");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Ausweis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Aublaufdatum")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Ausstellungsdatum")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Ausweisart")
                        .HasColumnType("int");

                    b.Property<string>("Ausweisnummer")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Behörde")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Geburtsname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Geburtsort")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StaatsangehörigkeitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaatsangehörigkeitId");

                    b.ToTable("Ausweise");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Bankverbindung", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BIC")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Kontoinhaber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Bankverbindungen");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Beruf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Berufe");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Dokument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Bearbeitungsstatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("MediumBlob");

                    b.Property<int?>("DokumentenArtId")
                        .HasColumnType("int");

                    b.Property<int>("FileExtension")
                        .HasColumnType("int");

                    b.Property<int?>("FirmaRegistrierungsDokumentHistorienId")
                        .HasColumnType("int");

                    b.Property<int?>("FirmaRegistrierungsDokumentId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VermittlerRegistrierungsDokumentHistorienId")
                        .HasColumnType("int");

                    b.Property<int?>("VermittlerRegistrierungsDokumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DokumentenArtId");

                    b.HasIndex("FirmaRegistrierungsDokumentHistorienId");

                    b.HasIndex("FirmaRegistrierungsDokumentId");

                    b.HasIndex("VermittlerRegistrierungsDokumentHistorienId");

                    b.HasIndex("VermittlerRegistrierungsDokumentId");

                    b.ToTable("Dokumente");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.DokumentArt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IstFirmenDokumentArt")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DokumentArtSet");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.EinladecodeVermittler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VermittlerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VermittlerId")
                        .IsUnique();

                    b.ToTable("EinladecodesVermittler");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Firma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Firmenname")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.ToTable("Firmen");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Gesellschaft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaximaleLaufzeitInJahren")
                        .HasColumnType("int");

                    b.Property<double>("MaximaleVergütung")
                        .HasColumnType("double");

                    b.Property<int>("MinimaleLaufzeitInJahren")
                        .HasColumnType("int");

                    b.Property<double>("MinimaleVergütung")
                        .HasColumnType("double");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("GesellschaftSet");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Kunde", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AusweisId")
                        .HasColumnType("int");

                    b.Property<int?>("BerufId")
                        .HasColumnType("int");

                    b.Property<int?>("Berufsstatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Familienstand")
                        .HasColumnType("int");

                    b.Property<bool>("IstVersicherungsnehmer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SteuerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TitelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VermittlerId")
                        .HasColumnType("int");

                    b.Property<bool>("VersichertePerson")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ÖffentlichesAmt")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AusweisId");

                    b.HasIndex("BerufId");

                    b.HasIndex("TitelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VermittlerId");

                    b.ToTable("Kunde");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Land", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Länder");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.ProvisionssatzGesellschaft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AbschlussVergütungProzent")
                        .HasColumnType("double");

                    b.Property<double>("BestandsVergütungProzent")
                        .HasColumnType("double");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GesellschaftId")
                        .HasColumnType("int");

                    b.Property<int>("MaxLaufzeitInJahren")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VermittlerId")
                        .HasColumnType("int");

                    b.Property<string>("VermittlerNr")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("GesellschaftId");

                    b.HasIndex("VermittlerId");

                    b.ToTable("ProvisionssätzeGesellschaft");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Titel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BezeichnungKurz")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TitelSet");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdresseId")
                        .HasColumnType("int");

                    b.Property<int>("Anrede")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Geburtsdatum")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Geburtsort")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("KeycloakIdentifier")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StaatsangehörigkeitId")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("StaatsangehörigkeitId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Vermittler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("AbschlussProvisionssatz")
                        .HasColumnType("float");

                    b.Property<int?>("BankverbindungId")
                        .HasColumnType("int");

                    b.Property<float>("BestandsProvisionssatz")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EingeladenVonVermittlerEinladecodeId")
                        .HasColumnType("int");

                    b.Property<int?>("FirmaIdBevollmächtigterVermittler")
                        .HasColumnType("int");

                    b.Property<string>("IhkRegistrierungsnummer")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IstAktiv")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MitarbeiterVonFirmaId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VermittlerRegistrierungsstatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankverbindungId");

                    b.HasIndex("EingeladenVonVermittlerEinladecodeId")
                        .IsUnique();

                    b.HasIndex("FirmaIdBevollmächtigterVermittler")
                        .IsUnique();

                    b.HasIndex("MitarbeiterVonFirmaId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Vermittler");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Adresse", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Land", "Land")
                        .WithMany()
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Ausweis", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Land", "Staatsangehörigkeit")
                        .WithMany()
                        .HasForeignKey("StaatsangehörigkeitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Dokument", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.DokumentArt", "DokumentenArt")
                        .WithMany()
                        .HasForeignKey("DokumentenArtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Insurance.Firma", null)
                        .WithMany("FirmaRegistrierungsdokumenteHistorie")
                        .HasForeignKey("FirmaRegistrierungsDokumentHistorienId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Insurance.Firma", null)
                        .WithMany("FirmaRegistrierungsDokumente")
                        .HasForeignKey("FirmaRegistrierungsDokumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Insurance.Vermittler", null)
                        .WithMany("RegistrierungsDokumenteHistorie")
                        .HasForeignKey("VermittlerRegistrierungsDokumentHistorienId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Insurance.Vermittler", null)
                        .WithMany("RegistrierungsDokumente")
                        .HasForeignKey("VermittlerRegistrierungsDokumentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entities.Insurance.EinladecodeVermittler", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Vermittler", null)
                        .WithOne("EinladecodeVermittler")
                        .HasForeignKey("Domain.Entities.Insurance.EinladecodeVermittler", "VermittlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Firma", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Kunde", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Ausweis", "Ausweis")
                        .WithMany()
                        .HasForeignKey("AusweisId");

                    b.HasOne("Domain.Entities.Insurance.Beruf", "Beruf")
                        .WithMany()
                        .HasForeignKey("BerufId");

                    b.HasOne("Domain.Entities.Insurance.Titel", "Titel")
                        .WithMany()
                        .HasForeignKey("TitelId");

                    b.HasOne("Domain.Entities.Insurance.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Insurance.Kunde", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Insurance.Vermittler", null)
                        .WithMany("Kunden")
                        .HasForeignKey("VermittlerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entities.Insurance.ProvisionssatzGesellschaft", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Gesellschaft", "Gesellschaft")
                        .WithMany()
                        .HasForeignKey("GesellschaftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Insurance.Vermittler", "Vermittler")
                        .WithMany()
                        .HasForeignKey("VermittlerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Insurance.User", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId");

                    b.HasOne("Domain.Entities.Insurance.Land", "Staatsangehörigkeit")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Insurance.User", "StaatsangehörigkeitId");
                });

            modelBuilder.Entity("Domain.Entities.Insurance.Vermittler", b =>
                {
                    b.HasOne("Domain.Entities.Insurance.Bankverbindung", "Bankverbindung")
                        .WithMany()
                        .HasForeignKey("BankverbindungId");

                    b.HasOne("Domain.Entities.Insurance.EinladecodeVermittler", "EingeladenVon")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Insurance.Vermittler", "EingeladenVonVermittlerEinladecodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Insurance.Firma", "FirmaBevollmächtigterVermittler")
                        .WithOne("BevollmächtigterVermittler")
                        .HasForeignKey("Domain.Entities.Insurance.Vermittler", "FirmaIdBevollmächtigterVermittler")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Insurance.Firma", "MitarbeiterVonFirma")
                        .WithMany("Mitarbeiter")
                        .HasForeignKey("MitarbeiterVonFirmaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Insurance.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Insurance.Vermittler", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
